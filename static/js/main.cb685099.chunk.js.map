{"version":3,"sources":["components/Button/Button.module.css","components/Button/Button.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","props","cls","classes","button","btnType","push","className","join","onClick","handleClick","children","Input","type","App","state","input","result","prevInput","parseCalculationString","s","ch","calculation","current","i","charAt","indexOf","parseFloat","calculate","calc","currentOp","ops","a","b","newCalc","length","j","evaluate","upatedRes","setState","addInput","val","lastchar","str","slice","updatedState","clearInput","addZeroInput","addDecimal","addSign","newstr","concat","this","Component","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cb685099.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__1nBDu\",\"operator\":\"Button_operator__3eSWW\",\"operator-equal\":\"Button_operator-equal__21CP9\"};","import React from 'react'\r\nimport  classes from './Button.module.css';\r\n\r\n const Button=(props)=> {\r\n    let cls =[classes.button];\r\n    if(props.btnType===\"operator\"){\r\n        cls.push(classes[props.btnType]);\r\n    }\r\n    if( props.btnType === \"operator-equal\"){\r\n        cls.push(classes[props.btnType]);\r\n    }\r\n\r\n    return (\r\n        <div className={cls.join(' ') }\r\n            onClick={ () => { props.handleClick(props.children);}} >\r\n            {props.children}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from 'react'\r\nimport  './Input.css';\r\n\r\nconst Input = (props)=> {\r\n    return (\r\n        <div className={props.type}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { Component } from 'react';\nimport  './App.css';\nimport Button from './components/Button/Button';\nimport Input from './components/Input';\n\n\n class App extends Component {\n  state={\n          input:\"\",\n          result:\"\",\n          prevInput:\"\",\n       };\n\n    parseCalculationString= (s) => {\n        // --- Parse a calculation string into an array of numbers and operators\n        var calculation = [],\n            current = '';\n        for (var i = 0, ch; ch = s.charAt(i); i++) {\n            if ('%x/+-'.indexOf(ch) > -1) {\n                if (current === '' && ch === '-') {\n                    current = '-';\n                } else {\n                    calculation.push(parseFloat(current), ch);\n                    current = '';\n                }\n            } else {\n                current =current + s.charAt(i);\n            }\n        }\n        if (current !== '') {\n            calculation.push(parseFloat(current));\n        }\n        return calculation;\n    }\n    \n     calculate= (calc) => {\n        // --- Perform a calculation expressed as an array of operators and numbers\n        var ops = [\n                   {'x': (a, b) => a * b, '/': (a, b) => a / b, '%': (a, b) => ((a % b) +b) % b },\n                   {'+': (a, b) => a + b, '-': (a, b) => a - b}\n                  ],\n        newCalc = [],\n        currentOp;\n        for (var i = 0; i < ops.length; i++) {\n            for (var j = 0; j < calc.length; j++) {\n                if (ops[i][calc[j]]) {\n                    currentOp = ops[i][calc[j]];\n                } else if (currentOp) {\n                    newCalc[newCalc.length - 1] = \n                        currentOp(newCalc[newCalc.length - 1], calc[j]);\n                    currentOp = null;\n                } else {\n                    newCalc.push(calc[j]);\n                }\n                // console.log(newCalc);\n            }\n            calc = newCalc;\n            newCalc = [];\n        }\n        if (calc.length > 1) {\n            // console.log('Error: unable to resolve calculation');\n            return calc;\n        } else {\n            return calc[0];\n        }\n    }\n    evaluate = () =>{\n      let upatedRes=this.calculate( this.parseCalculationString(this.state.input));\n      this.setState({result: upatedRes,prevInput: this.state.input, input:'' });\n      \n      \n    }\n\n    addInput = val => {\n     \n      if(this.state.input !==\"\"){\n         let lastchar=this.state.input.charAt(this.state.input.length-1);\n\n         if( 'x/%+-'.indexOf(lastchar) >-1 && 'x/%+-'.indexOf(val) >-1){\n              \n              if( lastchar==='-' && 'x/'.indexOf( this.state.input.charAt(this.state.input.length - 2) ) >-1 && val !=='-'){\n                let str= this.state.input.slice(0,this.state.input.length-2);\n                str= str+val; \n                this.setState({input:str});\n              }\n              else if((lastchar==='x' || lastchar ==='/') && val===\"-\"){\n                this.setState({input:this.state.input + val});\n              }else if( val !== lastchar ){\n                      let str = this.state.input.slice(0,this.state.input.length-1);\n                      str= str + val;\n                      this.setState({input:str});  \n                    }\n          }\n          else{\n                this.setState({input:this.state.input + val});\n          };\n\n        //  console.log(\"i am not empty\");\n      }else{\n        if(val !=='x' && val !=='/' && val !=='%' && val !=='+'){\n          let updatedState ={\n            ...this.state,\n            input:this.state.input + val\n          }\n            this.setState(updatedState);\n            // console.log(\"i am empty\");\n        }\n      }\n    };\n\n    clearInput = () => {\n      let updatedState={\n          input:\"\",\n          result:\"\",\n          prevInput:\"\",\n      };\n    this.setState(updatedState);\n    };\n\n    addZeroInput = val => {\n    if (this.state.input !== \"\") {\n        this.setState({ input: this.state.input + val });\n          }\n    };\n\n    addDecimal = val => {\n    if (this.state.input.indexOf(\".\") === -1) {\n        this.setState({ input: this.state.input + val });\n    }\n    };\n\n    addSign = () => {\n      if(this.state.input ===\"\"){\n          this.setState({input: this.state.input + '-'});\n      }else if(this.state.input.length === 1 && this.state.input==='-'){\n          this.setState({input:''});\n      }else if(this.state.input.length=== 1 && this.state.input !=='-'){\n          let str='-';\n          str= str + this.state.input;\n          this.setState({input: str});\n      }else if(this.state.input.length >= 2 && this.state.input.indexOf('-') === 0 && this.state.input.indexOf('x') ===-1\n               && this.state.input.indexOf('/') ===-1 && this.state.input.indexOf('%') ===-1 ){\n          \n          let str=this.state.input.slice(1);\n          this.setState({input:str});\n      }\n      else if(this.state.input.length >= 2 && this.state.input.indexOf('-') ===-1 && this.state.input.indexOf('x') ===-1\n               && this.state.input.indexOf('/') ===-1 && this.state.input.indexOf('%') ===-1 ) {\n          \n          let str='-';\n          let newstr=str.concat(this.state.input);\n          this.setState({input:newstr});\n      }      \n    };\n      \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"cal-wrapper\">\n          <div>\n          <Input type=\"input\">{this.state.input !==\"\" ? this.state.input : this.state.prevInput}</Input>\n          <Input type=\"result\">{this.state.input !==\"\"? null : this.state.result}</Input> \n          </div>       \n          <div className=\"row\">\n            <Button handleClick={this.clearInput}>C</Button>\n            <Button handleClick={this.addSign}>+/-</Button>\n            <Button handleClick={this.addInput}>%</Button>\n            <Button handleClick={this.addInput} btnType=\"operator\">/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addInput}>7</Button>\n            <Button handleClick={this.addInput}>8</Button>\n            <Button handleClick={this.addInput}>9</Button>\n            <Button handleClick={this.addInput} btnType=\"operator\">x</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addInput}>4</Button>\n            <Button handleClick={this.addInput}>5</Button>\n            <Button handleClick={this.addInput}>6</Button>\n            <Button handleClick={this.addInput} btnType=\"operator\">-</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.addInput}>1</Button>\n            <Button handleClick={this.addInput}>2</Button>\n            <Button handleClick={this.addInput}>3</Button>\n            <Button handleClick={this.addInput} btnType=\"operator\">+</Button>\n          </div>\n          <div className=\"equal\">\n            <Button handleClick={this.addZeroInput}>0</Button>\n            <Button handleClick={this.addDecimal}>.</Button>\n            <Button handleClick={this.evaluate} btnType=\"operator-equal\">=</Button>\n          </div>\n        </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst app=(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>\n)\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}